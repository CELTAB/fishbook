extends base_layout

block stylesheets
  link(href="/css/style.css" rel="stylesheet")
  link(href="/css/home.css" rel="stylesheet")

block append scripts
  -var jsonArray = JSON.parse(collectors);

  script(src='https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false')
  script(src='/socket.io/socket.io.js')

  script().  
    var collectorsArray =  JSON.parse( !{JSON.stringify(collectors)} );

    var collectors = [];
    
    var map;    

    function initialize() {

      //latLng = new google.maps.LatLng(latDefault, lngDefault);
      var mapOptions = {
        zoom: 8,
        //center: latLng,
        mapTypeId: google.maps.MapTypeId.HYBRID
      };
      map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

      //create_marker(latLng);

      drawMarkers()
    }

    google.maps.event.addDomListener(window, 'load', initialize);


    var Marker = function(title, markerIcon){
      return new google.maps.Marker({
          map: map,
          draggable: false,
          icon: markerIcon,
          title: title
      });
    };

    var Collector = function(id, collectorName, mac, status, latLng){
      this.id = id;
      this.name = collectorName;
      this.mac = mac;
      this.latLng = latLng;
      
      // Create the markers for  the collector point
      this.onlineMarker = new Marker(collectorName, 'img/markers/collector_online.png');
      this.onlineMarker.setPosition(this.latLng);
      this.offlineMarker = new Marker(collectorName, 'img/markers/collector_offline.png');
      this.offlineMarker.setPosition(this.latLng);
      this.readEventMarker = new Marker(collectorName, 'img/markers/rfid_event.png');
      this.readEventMarker.setPosition(this.latLng);
      this.readEventMarkerYellow = new Marker(collectorName, 'img/markers/rfid_event_yellow.png');
      this.readEventMarkerYellow.setPosition(this.latLng);      

      // change visibility of the markers
      this.onlineMarker.setVisible(status == 'Online');
      this.offlineMarker.setVisible(!(status == 'Online'));
      this.readEventMarker.setVisible(false);
      this.readEventMarkerYellow.setVisible(false);

      this.status = status;      

      this.setStatus = function(newStatus) {
        this.status = newStatus;
        this.updateStatus();
      }

      this.updateStatus = function() {
        if(!this.isBussy){
          if(this.status == 'Online'){
            this.onlineMarker.setVisible(true);
            this.offlineMarker.setVisible(false);
          }else{
            this.onlineMarker.setVisible(false);
            this.offlineMarker.setVisible(true);
          }
        }
      };

      this.startReadEvent = function(){        
        if(!this.isBussy) {
          this.isBussy = true;
          this.onlineMarker.setVisible(false);
          this.offlineMarker.setVisible(false);
          this.readEventMarker.setVisible(true);   
          this.animate(6, 800);
        }
      };

      this.animate = function(recursion, time){
        var _this = this;
        if(recursion > 0 ){
          // temporary only to make the animation with offline
          if(recursion % 2){
            _this.readEventMarker.setVisible(false);
            _this.readEventMarkerYellow.setVisible(true);
          }else{          
            _this.readEventMarker.setVisible(true);
            _this.readEventMarkerYellow.setVisible(false);
          }

          setTimeout(function(){
            _this.animate(recursion-1, time);
          }, time);      
        }else{
          _this.readEventMarker.setVisible(false);      
          _this.readEventMarkerYellow.setVisible(false);      
          _this.isBussy = false;
          _this.updateStatus();          
        }
      }

      this.getMarkers = function(){
        return {online: this.onlineMarker, offline: this.offlineMarker, readEvent: this.readEventMarker};
      };

      this.isBussy = false;
    };

    function drawMarkers() {
      var bounds = new google.maps.LatLngBounds();  

      for(var key in collectorsArray) {
        var id = collectorsArray[key]._id;
        var title = collectorsArray[key].name;
        var mac = collectorsArray[key].mac;
        var status = collectorsArray[key].status;
        var latLng = new google.maps.LatLng(collectorsArray[key].lat, collectorsArray[key].lng );

        var collector = new Collector(id, title, mac, status, latLng);
        collector.updateStatus();

        collectors.push(collector);

        bounds.extend( collector.getMarkers().online.getPosition() );        
      }

      map.fitBounds( bounds );
    }

    var socket = io.connect('http://localhost:8082');

    socket.on('connect', function(data){
        console.log("Connected to Node.js Server");            
    });

    socket.on('collectors_status', function (data) {      
      for(var key in collectors){
        if(collectors[key].mac == data.mac){            
          collectors[key].setStatus(data.status);
          break;
        }
      }
    });

    socket.on('rfiddata', function (data) {
      for(var key in collectors){
        if(collectors[key].mac == data.mac){            
          collectors[key].startReadEvent();
          break;
        }
      }
    });

block append content

  if username
    div(class="container")
      div(id="mapCanvasRow" class="row")
        div(class="col-md-12")
          div(class="google-map-canvas" id="map-canvas")                