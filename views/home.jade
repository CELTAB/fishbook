extends base_layout

block stylesheets
  link(href="/css/style.css" rel="stylesheet")
  link(href="/css/home.css" rel="stylesheet")

block append scripts
  -var jsonArray = JSON.parse(collectors);

  script(src='https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false')
  script(src='/socket.io/socket.io.js')

  script().  
    var collectorsArray =  JSON.parse( !{JSON.stringify(collectors)} );

    var markers=[];
    var collectorsHash = {};
    
    var map;    

    function initialize() {

      //latLng = new google.maps.LatLng(latDefault, lngDefault);
      var mapOptions = {
        zoom: 8,
        //center: latLng,
        mapTypeId: google.maps.MapTypeId.HYBRID
      };
      map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

      //create_marker(latLng);

      drawMarkers()
    }

    google.maps.event.addDomListener(window, 'load', initialize);

    function drawMarkers(){
      var bounds = new google.maps.LatLngBounds();  

      var collectorOnlineIcon = {
        url: 'img/markers/collector_online.png'
      };

      var collectorOfflineIcon = {
        url: 'img/markers/collector_offline.png'
      };

      var collectorRFIDEventIcon = {
        url: 'img/markers/rfid_event.png'
      };

      for(var key in collectorsArray){
        var latLng = new google.maps.LatLng(collectorsArray[key].lat, collectorsArray[key].lng );

        var onlineMarker = new google.maps.Marker({
          map: map,
          draggable: false,
          icon: collectorOnlineIcon,
          title: collectorsArray[key].name
        });

        var offlineMarker = new google.maps.Marker({
          map: map,
          draggable: false,
          icon: collectorOfflineIcon,
          title: collectorsArray[key].name
        });

        var readEventMarker = new google.maps.Marker({
          map: map,
          draggable: false,
          icon: collectorRFIDEventIcon,
          title: collectorsArray[key].name
        });

        onlineMarker.setPosition(latLng);
        offlineMarker.setPosition(latLng);
        readEventMarker.setPosition(latLng);

        if(collectorsArray[key].status == 'Online'){
          onlineMarker.setVisible(true);
          offlineMarker.setVisible(false);
        }else{
          onlineMarker.setVisible(false);
          offlineMarker.setVisible(true);        
        }

        readEventMarker.setVisible(false);

        var collector = {name: collectorsArray[key].name, 
                         mac: collectorsArray[key].mac, 
                         latLong: latLng,
                         markers: { online: onlineMarker,
                                    offline: offlineMarker,
                                    readEventMarker: readEventMarker},
                         updateCollectorStatus: function(newStatus) {
                            console.log(this.name + ' is now ' + newStatus);
                            if(newStatus == 'Online'){
                              console.log('update makers to online');
                              this.markers.offline.setVisible(false);
                              this.markers.online.setVisible(true);
                            }else{
                              console.log('update makers to offline');
                              this.markers.online.setVisible(false);
                              this.markers.offline.setVisible(true);
                            }
                         },
                         isBussy: false };
        //- console.log(collector);

        collectorsHash[collectorsArray[key]._id] = collector;

        bounds.extend( collector.markers.online.getPosition() );      
        markers.push(collector.markers.online);
       
      }
      map.fitBounds( bounds );
    }

    var socket = io.connect('http://179.106.217.28:8082/');

    socket.on('connect', function(data){
        console.log("Connected to Node.js Server");            
    });

    socket.on('collectors_status', function (data) {      
      for(var key in collectorsHash){
        if(collectorsHash[key].mac == data.mac){            
          collectorsHash[key].updateCollectorStatus(data.status);
          break;
        }
      }
    });

    socket.on('rfiddata', function (data) {
      console.log(data);
      console.log('Update RFID marker: ' + data.htmlRow.mac);
    });

block append content

  if username
    div(class="container")
      div(id="mapCanvasRow" class="row")
        div(class="col-md-12")
          div(class="google-map-canvas" id="map-canvas")                